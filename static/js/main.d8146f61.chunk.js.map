{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","isInfinite","translate","onTranslate","onSlideIndex","maxTranslate","length","disableForward","disableBack","className","style","width","transition","transform","map","image","index","src","alt","disabled","cn","type","onClick","App","imagesData","useState","setItemWidth","setFrameSize","setStep","setAnimationDuration","setIsInfinite","setTranslate","slideIndex","SetSlideIndex","maxSlideIndex","move","htmlFor","id","min","max","value","onChange","event","target","prevWidth","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8146f61.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  isInfinite: boolean;\n  translate: number;\n  onTranslate: React.Dispatch<React.SetStateAction<number>>;\n  onSlideIndex: (move: string) => void;\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  isInfinite,\n  translate,\n  onTranslate,\n  onSlideIndex,\n}) => {\n  const maxTranslate = (images.length - frameSize) * itemWidth;\n  const minTranslate = 0;\n  const disableForward = translate === maxTranslate && !isInfinite;\n  const disableBack = translate === minTranslate && !isInfinite;\n\n  const moveForward = () => {\n    if (isInfinite && translate === maxTranslate) {\n      onTranslate(minTranslate);\n      onSlideIndex('forward');\n\n      return;\n    }\n\n    const newTranslate = translate + (step * itemWidth) > maxTranslate\n      ? maxTranslate\n      : translate + (step * itemWidth);\n\n    onTranslate(newTranslate);\n\n    onSlideIndex('forward');\n  };\n\n  const moveBack = () => {\n    if (isInfinite && translate === minTranslate) {\n      onTranslate(maxTranslate);\n      onSlideIndex('back');\n\n      return;\n    }\n\n    const newTranslate = translate - (step * itemWidth) <= minTranslate\n      ? minTranslate\n      : translate - (step * itemWidth);\n\n    onTranslate(newTranslate);\n\n    onSlideIndex('back');\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{ width: `${frameSize * itemWidth}px`, transition: `${animationDuration}ms all` }}\n    >\n      <div className=\"Carousel__container\">\n        <ul\n          className=\"Carousel__list\"\n          style={{ transition: `${animationDuration}ms all`, transform: `translateX(-${translate}px)` }}\n        >\n          {images.map((image, index) => {\n            return (\n              <li key={image}>\n                <img\n                  width={itemWidth}\n                  src={image}\n                  alt={`${index + 1}`}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          style={{ transition: `${animationDuration}ms all` }}\n          disabled={disableBack}\n          className={cn(\n            'Carousel__button',\n            { 'Carousel__button--disabled': disableBack },\n          )}\n          type=\"button\"\n          onClick={moveBack}\n        >\n          Prev\n\n        </button>\n\n        <button\n          data-cy=\"next\"\n          style={{ transition: `${animationDuration}ms all` }}\n          disabled={disableForward}\n          className={cn(\n            'Carousel__button',\n            { 'Carousel__button--disabled': disableForward },\n          )}\n          type=\"button\"\n          onClick={moveForward}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\nexport const App: React.FC = () => {\n  const imagesData: string[] = [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ];\n\n  const [itemWidth, setItemWidth] = useState(130);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [isInfinite, setIsInfinite] = useState(false);\n  const [translate, setTranslate] = useState(0);\n  const [slideIndex, SetSlideIndex] = useState(0);\n\n  const maxSlideIndex = imagesData.length - frameSize;\n\n  const getNewSlideIndex = (move: string): void => {\n    if (move === 'forward') {\n      if (isInfinite && slideIndex === maxSlideIndex) {\n        SetSlideIndex(0);\n\n        return;\n      }\n\n      if (slideIndex + step >= maxSlideIndex) {\n        SetSlideIndex(maxSlideIndex);\n\n        return;\n      }\n\n      SetSlideIndex(slideIndex + step);\n    }\n\n    if (move === 'back') {\n      if (isInfinite && slideIndex === 0) {\n        SetSlideIndex(maxSlideIndex);\n\n        return;\n      }\n\n      if (slideIndex - step < 0) {\n        SetSlideIndex(0);\n\n        return;\n      }\n\n      SetSlideIndex(slideIndex - step);\n    }\n  };\n\n  const getNewItemWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (itemWidth !== +value) {\n      const prevWidth = itemWidth;\n\n      setItemWidth(+value);\n\n      if (translate !== 0) {\n        const newTranslate\n          = translate + ((+value - prevWidth) * slideIndex);\n\n        setTranslate(newTranslate);\n      }\n    }\n  };\n\n  const getNewFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (frameSize !== +value) {\n      setFrameSize(+value);\n    }\n  };\n\n  const getNewStep = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (step !== +value) {\n      setStep(+value);\n    }\n  };\n\n  const getNewAD = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (animationDuration !== +value) {\n      setAnimationDuration(+value);\n    }\n  };\n\n  const getNewInfinte = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target;\n\n    if (checked) {\n      setIsInfinite(true);\n    } else {\n      setIsInfinite(false);\n    }\n  };\n\n  return (\n    <div className=\"App\" data-cy=\"title\">\n      <h1>{`Carousel with ${imagesData.length} images`}</h1>\n      <Carousel\n        images={imagesData}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        isInfinite={isInfinite}\n        translate={translate}\n        onTranslate={setTranslate}\n        onSlideIndex={getNewSlideIndex}\n      />\n\n      <div className=\"App__setting\">\n        <label htmlFor=\"itemId\" className=\"App__label\">\n          Item width:\n          <input\n            className=\"App__input\"\n            id=\"itemId\"\n            type=\"number\"\n            min={30}\n            max={400}\n            value={itemWidth}\n            onChange={getNewItemWidth}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\" className=\"App__label\">\n          Frame size:\n          <input\n            className=\"App__input\"\n            id=\"frameId\"\n            type=\"number\"\n            min={1}\n            max={10}\n            value={frameSize}\n            onChange={getNewFrameSize}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\" className=\"App__label\">\n          Step:\n          <input\n            className=\"App__input\"\n            id=\"stepId\"\n            type=\"number\"\n            min={1}\n            max={10}\n            value={step}\n            onChange={getNewStep}\n          />\n        </label>\n\n        <label htmlFor=\"animationDuration\" className=\"App__label\">\n          Animation duration:\n          <input\n            className=\"App__input\"\n            id=\"animationDuration\"\n            type=\"number\"\n            min={250}\n            max={5000}\n            step={250}\n            value={animationDuration}\n            onChange={getNewAD}\n          />\n        </label>\n\n        <label htmlFor=\"isInfinite\" className=\"App__label\">\n          Infinite:\n          <input\n            className=\"App__input  App__input--checkbox\"\n            id=\"isInfinite\"\n            type=\"checkbox\"\n            checked={isInfinite}\n            onChange={getNewInfinte}\n          />\n        </label>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}